- Class: meta
  Course: Análisis y visualización de datos biológicos con R
  Lesson: Leer y escribir datos
  Author: Paulo Inácio Prado, a partir de leciones de Nick Carchedi y José R Sosa,
  Type: Standard
  Organization: Universidade de São Paulo
  Version: 1.0.0

- Class: text
  Output: "Esta lección es una combinación con modificaciones de las lecciones 'Leer y Escribir Datos'  del curso 'Programación estadística en R', de Ismael Fernández, UNAM, México (https://github.com/ifunam/programacion-estadistica-r), y del curso 'R Programming' traducida al castellano por José R Sosa (https://github.com/josersosa/Programando_en_R)."

- Class: text
  Output: En esta lección aprenderemos a leer conjuntos de datos en R. También aprenderemos a realizar una primera inspección de los datos.

- Class: text
  Output: 'R puede importar conjuntos de datos desde archivos de texto, otros
  softwares de estadística y hasta hojas de cálculo. Puedes leer archivos de datos que hayas descargado en tu computadora o directamente de Internet.'

- Class: cmd_question
  Output: 'Empezamos con los archivos de datos en texto.  Vamos descargar un archivo de datos del sitio de nuestro curso. Primero crea un objeto con la url para descargar. Escribe url1 <- "https://pilaboratory.github.io/R_UNMSM/data/usda_plant_data.csv"'
  CorrectAnswer: url1 <- "https://pilaboratory.github.io/R_UNMSM/data/usda_plant_data.csv"
  AnswerTests: omnitest(correctExpr='url1 <- "https://pilaboratory.github.io/R_UNMSM/data/usda_plant_data.csv"')
  Hint: Copia url1 <- "https://pilaboratory.github.io/R_UNMSM/data/usda_plant_data.csv" y pégalo en la línea de comando.

- Class: cmd_question
  Output: 'Ahora descargue el archivo en su directorio de trabajo con download.file(url = url1, destfile = "usda_plant_data.csv")' 
  CorrectAnswer: download.file(url = url1, destfile = "usda_plant_data.csv") 
  AnswerTests: omnitest(correctExpr='download.file(url = url1, destfile = "usda_plant_data.csv")')
  Hint: Copia download.file(url = url1, destfile = "usda_plant_data.csv") y pégalo en la línea de comando.

- Class: text
  Output: 'La mayoría de los archivos que contienen información tienen un
  formato similar. Generalmente cada línea del archivo representa una
  observación o registro, por lo que cada línea contiene un conjunto de
  diferentes variables asociadas con la observación.'

- Class: text
  Output: 'En los archivos de datos em texto, diferentes variables son separadas por un carácter especial,
  llamado delimitador. Otra veces las variables son diferenciadas por
  su ubicación en cada línea.'

- Class: text
  Output: 'El separador de números decimales (punto o coma en general) y la existencia o no de nombres de variables son otras cosas a las que debe prestar atención en estos archivos.'
- Class: cmd_question
  Output: Echemos un vistazo al archivo que acabamos de descargar. Escriba file.edit("usda_plant_data.csv"). 
  CorrectAnswer: file.edit("usda_plant_data.csv")
  AnswerTests: omnitest(correctExpr='file.edit("usda_plant_data.csv")')
  Hint: Escriba file.edit("usda_plant_data.csv") en la linea de comando y pulse intro.

- Class: text
  Output: 'RStudio debe abrir el archivo en la ventana del editor de archivos, que normalmente está encima de la ventana de la consola de R. Podemos ver que el valor de cada campo está encerrado entre comillas dobles. Vemos también que los valores faltantes están como dos comillas dobles en secuencia ("").'

- Class: mult_question
  Output: "¿Cuál es el delimitador de campo en este archivo?"
  CorrectAnswer: coma
  AnswerChoices: coma; punto y coma; punto; espacio
  AnswerTests: omnitest(correctVal='coma')
  Hint: Mira lo que hay entre los campos de valores.

- Class: mult_question
  Output: "¿Qué hay en la primera línea del archivo?"
  AnswerChoices: datos; nombres de variables; nombre del fichero;
  CorrectAnswer: nombres de variables
  AnswerTests: omnitest(correctVal='nombres de variables')
  Hint: Compare los campos de la primera línea con los de las líneas siguientes.

- Class: text
  Output: 'Ahora ya sabemos lo que necesitamos para importar el archivo a R. La función para hacerlo es read.table. Es una función con muchos argumentos, lo que le da mucha flexibilidad para leer distintos tipos de datos.' 

- Class: cmd_question
  Output: 'En nuestro caso, necesitamos especificar que el primer renglón contiene los nombres de la columnas (header=TRUE), sep para especificar el delimitador (sep=",") y que el string que represent valores faltantes (na.strings=""). Ingresa plants <- read.table("usda_plant_data.csv", header=TRUE, sep=",", na.strings = "") '
  CorrectAnswer: plants <- read.table("usda_plant_data.csv", header=TRUE, sep=",", na.strings="")
  AnswerTests: omnitest(correctExpr='plants <- read.table("usda_plant_data.csv", header=TRUE, sep=",", na.strings="")')
  Hint: Ingresa plants <- read.table("usda_plant_data.csv", header=TRUE, sep="," , na.strings="")  y pulse intro.

- Class: cmd_question
  Output: 'El primer argumento de read.table es el nombre del fichero de texto a importar. En este argumento puede escribir un enlace a un fichero de Internet. La mayoría de las funciones que leen ficheros lo permiten. Intentalo:  plants <- read.table(url1, header=TRUE, sep=",", na.strings="")'
  CorrectAnswer: plants <- read.table(url1, header=TRUE, sep=",", na.strings="")
  AnswerTests: omnitest(correctExpr='plants <- read.table(url1, header=TRUE, sep=",", na.strings="")')
  Hint: Asegúrate de tener un objeto url1 en tu espacio de trabajo, con la url al archivo. A continuación, escriba el comando y pulse ENTER.

- Class: text
  Output: 'Se trata de un archivo csv (valores separados por comas), un estándar de datos de texto tabular que pueden crear la mayoría de los programas. R incluye un conjunto de funciones que llaman a read.table()
  con diferentes opciones por defecto para valores como sep y header,
  y algunos otros. En la mayoría de los casos encontrarás que puedes
  usar read.csv() para archivos separados por comas o read.delim()
  para archivos delimitados por TAB sin especificar otras opciones.'
- Class: cmd_question
  Output: Intenta importar el archivo con read.csv, sin informar los argumentos header y sep.
  CorrectAnswer: plants <- read.csv("usda_plant_data.csv", na.strings="")
  AnswerTests: omnitest(correctExpr='plants <- read.csv("usda_plant_data.csv", na.strings="")')
  Hint: Ingresa plants <- read.csv("usda_plant_data.csv", na.strings="")

- Class: cmd_question
  Output: "Todas esas maneras de importación crean el objeto 'plants' en su espacio de trabajo. En Rstudio, verá el objeto en la ventana del entorno de trabajo. Escriba ls() para listar las variables en el espacio de trabajo, entre los cuales debe aparecer plants."
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Utilice el comando ls() para desplegar las variables creadas en el espacio de trabajo.

- Class: text
  Output: En RStudio puede importar datos a través del menú Files > Import data sets. Pero mantener los comandos de importación de datos en su código hace que sus análisis sean reproducibles.

- Class: text
  Output: Cada vez que usted está trabajando con un nuevo conjunto de datos, lo primero que debe hacer es mirarlo! ¿Cuál es el formato de los datos? ¿Cuáles son las dimensiones? ¿Cuáles son los nombres de las variables? ¿Cómo se almacenan las variables? ¿Existen datos que faltan? ¿Hay errores en los datos?

- Class: cmd_question
  Output: Empecemos por por verificar la clase de la variable plants con class(plants). Esto nos dará una idea de la estructura general de los datos.
  CorrectAnswer: class(plants)
  AnswerTests: omnitest(correctExpr='class(plants)')
  Hint: Utilice la class(plants) para comprobar la clase de la variable plants.

- Class: text
  Output: Es muy común que los datos se almacenen en una trama de datos (clase data.frame). Esta es la clase predeterminada para los datos leídos en R utilizando funciones como read.csv() y read.table().

- Class: cmd_question
  Output: Dado que el conjunto de datos se almacena en una trama de datos, sabemos que debe ser es rectangular. En otras palabras, tiene dos dimensiones (filas y columnas) y encaja perfectamente en una tabla u hoja de cálculo. Utilice dim(plants) para ver exactamente con cuántas filas y columnas estamos tratando.
  CorrectAnswer: dim(plants)
  AnswerTests: omnitest(correctExpr='dim(plants)')
  Hint: Utilice dim(plants) para ver las dimensiones exactas del conjunto de datos de las plants.

- Class: text
  Output: "El primer número que se ve (5166) es el número de filas (observaciones) y el segundo número (12) es el número de columnas (variables)." 
- Class: cmd_question
  Output: También puede utilizar nrow(plants) para ver sólo el número de filas. Inténtalo.
  CorrectAnswer: nrow(plants)
  AnswerTests: omnitest(correctExpr='nrow(plants)')
  Hint: Utilice nrow(plants) para ver sólo el número de filas.

- Class: cmd_question
  Output: "... Y ncol(plants) para ver sólo el número de columnas."
  CorrectAnswer: ncol(plants)
  AnswerTests: omnitest(correctExpr='ncol(plants)')
  Hint: Utilice ncol(plants) para ver sólo el número de columnas.

- Class: cmd_question
  Output: "Ahora que sabemos forma y tamaño del conjunto de datos, vamos a tener una idea de lo que hay dentro. names(plants) devolverá un vector de caracteres con los nombres de las columnas (es decir, variables). Inténtalo."
  CorrectAnswer: names(plants)
  AnswerTests: omnitest(correctExpr='names(plants)')
  Hint: names(plants) devuelve un vector carácter de nombres de columna (es decir, variables).

- Class: text
  Output: "Los nombres de las variables son muy descriptivos. La función read.table sustituye los espacios y los caracteres que no son letras en los nombres de las variables por puntos. Pero esto ha creado algunos nombres raros, como 'Temperatura..Mínima...F.', convertido a 'Temperatura, Mínima (°F)'. Una forma sencilla de solucionarlo es utilizar la propia función names para asignar un nuevo nombre a una o varias variables."  

- Class: cmd_question
  Output: El comando names(plants)[12] devuelve el decimo segundo elemento del vector de nombres de variables. Intentálo.
  CorrectAnswer: names(plants)[12]
  AnswerTests: omnitest(correctExpr='names(plants)[12]')
  Hint: names(plants)[12] devuelve el nombre de la 12a variable.

- Class: cmd_question
  Output: 'El comando names(plants)[12] <- "Temperature.Minimum.F" cambia el nombre de la variable. Intentálo.'
  CorrectAnswer: names(plants)[12] <- "Temperature.Minimum.F"
  AnswerTests: omnitest(correctExpr='names(plants)[12] <- "Temperature.Minimum.F"')
  Hint: names(plants)[12] <- "Temperature.Minimum.F" cambia el nombre de la 12a variable.

- Class: cmd_question
  Output: "Ahora cambie el nombre de la variable 'Precipitation..Minimum.' para 'Precipitation.Minimum'"
  CorrectAnswer: names(plants)[9] <- "Precipitation.Minimum"
  AnswerTests: omnitest(correctExpr='names(plants)[9] <- "Precipitation.Minimum"')
  Hint: Ingresa names(plants)[9] <- "Precipitation.Minimum"
  
- Class: text
  Output: Si hay muchas variables para cambiar nombres hay otras maneras mas faciles para hacerlo. Pero todas utilizan la asignación función names.

- Class: cmd_question
  Output: "read.table importa variables no numéricas de tipo 'carácter'. Si va a utilizar alguna de ellas como variable categórica en sus análisis, es importante convertirlas en factores. Hágalo para la variable tolerancia a la sombra con el comando plantas$Tolerancia.sombra <- factor(plantas$Tolerancia.sombra)."
  CorrectAnswer: plants$Shade.Tolerance <- factor(plants$Shade.Tolerance)
  AnswerTests: omnitest(correctExpr='plants$Shade.Tolerance <- factor(plants$Shade.Tolerance)')
  Hint: Ingrese plants$Shade.Tolerance <- factor(plants$Shade.Tolerance)

- Class: cmd_question
  Output: Converta la variable Active.Growth.Period en factor. 
  CorrectAnswer: plants$Active.Growth.Period <- factor(plants$Active.Growth.Period) 
  AnswerTests: omnitest(correctExpr='plants$Active.Growth.Period <- factor(plants$Active.Growth.Period)')
  Hint: plants$Active.Growth.Period <- factor(plants$Active.Growth.Period) converte la variable en factor.

- Class: text
  Output: Ahora vamos a dar un vistazo a los datos. Sin embargo, nuestra base de datos contiene más de 5.000 observaciones (filas), así que es poco práctico ver toda la tabla a la vez.
  
- Class: cmd_question
  Output: La función head() le permite hacer una vista previa de la parte superior del conjunto de datos. Dese la oportunidad con un solo argumento.
  CorrectAnswer: head(plants)
  AnswerTests: omnitest(correctExpr='head(plants)')
  Hint: head(plants) le mostrará la parte superior del conjunto de datos.

- Class: text
  Output: Tome un minuto para mirar el resultado y entender la salida anterior. Cada fila se etiqueta con el número de observación y cada columna con el nombre de la variable. Es probable que su pantalla no sea lo suficientemente amplia como para ver las 12 columnas de lado a lado, en cuyo caso R muestra tantas columnas como pueda en cada línea antes de continuar al siguiente.

- Class: cmd_question
  Output: Por defecto, la función head() muestra las primeras seis filas de los datos. Puede modificar este comportamiento al pasar como segundo argumento el número de filas que desea ver. Use la head() para obtener una vista previa de las primeras 10 filas de plantas.
  CorrectAnswer: head(plants, 10)
  AnswerTests: omnitest(correctExpr='head(plants, 10)')
  Hint: head(plants, 10) le mostrará las primeras 10 filas del conjunto de datos.

- Class: cmd_question
  Output: Lo mismo se aplica en el uso de la función tail() para obtener una vista previa del final del conjunto de datos. Utilice tail() para ver las últimas 15 filas.
  CorrectAnswer: tail(plants, 15)
  AnswerTests: omnitest(correctExpr='tail(plants, 15)')
  Hint: tail(plants, 15) le mostrará las últimoas 15 filas del conjunto de datos.

- Class: cmd_question
  Output: Después de la vista previa de la parte superior e inferior de los datos, usted probablemente ha notado un montón de NAs, que son los marcadores de posición de R para los valores perdidos. Use summary(plants) para obtener una mejor idea de cómo se distribuye cada variable y que tanto de la base de datos no se encuentra.
  CorrectAnswer: summary(plants)
  AnswerTests: omnitest(correctExpr='summary(plants)')
  Hint: Pruebe summary(plants) para ver cómo se distribuye cada variable y cuantos valores perdidos tiene nuestra base de datos.

- Class: text
  Output: summary() proporciona una salida diferente para cada variable, dependiendo de su clase. Para los datos numéricos, summary() muestra el mínimo, primer cuartil, la mediana, la media, el tercer cuartil, y el máximo. Estos valores nos ayudan a entender cómo se distribuyen los datos.

- Class: text
  Output: Para los factores (variables categóricas), summary() muestra el número de veces que cada valor (o "nivel") se produce en los datos. Por ejemplo, el resumen de Shade.Tolerance nos dice que nuestro conjunto de datos contiene 246 plantas tolerantes, 349 no tolerantes, etc.

- Class: cmd_question
  Output: 'Se puede ver que R trunca el resumen para Active.Growth.Period incluyendo una nueva categoría denominada "Other". Dado que es una variable categórica (factor), podemos ver cuántas veces cada valor realmente ocurre en los datos con table(plants$Active.Growth.Period).'
  CorrectAnswer: table(plants$Active.Growth.Period)
  AnswerTests: omnitest(correctExpr='table(plants$Active.Growth.Period)')
  Hint: table(plants$Active.Growth.Period) mostrará los recuentos para cada nivel de la variable de factor.

- Class: text
  Output: Cada una de las funciones que hemos introducido hasta el momento tiene su utilidad para ayudar a entender mejor la estructura de los datos. Sin embargo, hemos dejado lo mejor para lo último ...

- Class: cmd_question
  Output: "Quizás la función más útil y concisa para la comprensión de la estructura de sus datos es str (E*str*uctura). Dese una oportunidad ahora."
  CorrectAnswer: str(plants)
  AnswerTests: omnitest(correctExpr='str(plants)')
  Hint: Utilice str(plants) para observar la estructura de sus datos.

- Class: text
  Output: La belleza de str() es que combina muchas de las características de las otras funciones que ya has visto, todo ello en un formato conciso y fácil de leer. En la parte superior, se nos dice que la clase de las plantas es 'data.frame' y que cuenta con 5166 observaciones y 12 variables. A continuación, nos da el nombre y la categoría de cada variable, así como una vista previa de su contenido.

- Class: text
  Output: "str() es en realidad una función muy general que se puede utilizar en la mayoría de los objetos en R. Cada vez que usted quiere entender la estructura de algo (un conjunto de datos, función, etc.), str() es un buen modo para comenzar."

- Class: cmd_question
  Output: Y claro, pudes mirar todo los datos con View(plants). Inténtalo.
  CorrectAnswer: View(plants)
  AnswerTests: omnitest(correctExpr='View(plants)')
  Hint: Utilice View(plants) para visualización de la trama de datos.

- Class: text
  Output: En Rstudio, ese comando abre la visualización de los datos en la ventana de script. Da lo mismo si haces clic en el nombre del objeto en la ventana de ambiente de trabajo (Environment).

- Class: text
  Output: En esta lección, ha aprendido a cargar datos a R y a tener una idea de la estructura y contenido de un nuevo conjunto de datos utilizando una colección de funciones simples y útiles. Tomarse el tiempo para hacer esto por adelantado puede ahorrarle tiempo y frustración más tarde durante su análisis.


